<?xml version="1.0" encoding="utf-8" ?>
<doc>
	<assembly>
		<name>EsentSerialization</name>
	</assembly>
	<members>

		<!-- EsentSerialization namespace topic -->
		<member name="N:EsentSerialization">
			<summary>
				<para>
					<img alt="ESENT Serialization Class Library" src="../art/SerializationLogo.png" /><br />
					
					ESENT Serialization .NET class library is an object persistence framework that uses <a href="http://en.wikipedia.org/wiki/Extensible_Storage_Engine" target="_blank" >Extensible Storage Engine</a>
					storage technology.<br />
					Since Extensible Storage Engine is Windows built-in component, no installation or administration is required.
					And due to the ESE feature set, it's eminently suitable for both desktop applications, and highly-loaded servers.
					ESE is a core of Microsoft Exchange Server and Active Directory, and it's also used by Windows Mail and Windows Desktop Search.
				</para>

				<para>This documentation is for version 3.0 of the library.
				As of version 3.0, the library supports 3 targets:
				<ul>
					<li>Windows desktops, requires .NET 4.5.0 or above.
					Due to the limitations of Managed ESENT, some APIs like backup/restore and cursor duplication are only available in the desktop version of the library.</li>
					<li>Windows 8.1 Store</li>
					<li>Windows 10 Universal, including Windows Mobile 10.</li>
				</ul>
				Technically, it also works on Windows Phone 8.1, however ESENT isn't part of the official API surface there,
				so you won't be able to publish your app in the store if you'll use ESENT in your Phone 8.1 app.</para>

				<para>
					Since version 3.0, the project is <a href="https://github.com/Const-me/EsentSerialize" target="_blank" >hosted on GitHub</a>.
					Between 2.0 and 3.0, it was hosted <a href="http://esentserialize.codeplex.com" target="_blank" >on CodePlex</a>.
				</para>

				<para>This namespace contains classes to access the ESENT database.</para>
				<para>
					To access the database, first you need to open/create the database. Since version 3.0, the <see cref="T:EsentSerialization.EsentDatabase">EsentDatabase</see> static class is
					the recommended way to do that regardless on the runtime environment.
				</para>

				<para>
					Once the DB is opened, you'll get the instance of <see cref="T:EsentSerialization.SessionPool">SessionPool</see> class, from which you can get DB sessions.
					Don't forget to release session to the pool by disposing it as soon as you've done using it.
					Sessions obtained from a session pool are cheap: when you dispose them, no DB sessions/cursor are disposed, instead they are recycled to the pool.
				</para>

				<para>
					You can then use <see cref="T:EsentSerialization.iSerializerSession">iSerializerSession</see> interface
					to get individual tables from the session: see
					<see cref="M:EsentSerialization.iSerializerSession.Cursor``1">Cursor</see>,
					<see cref="M:EsentSerialization.iSerializerSession.Recordset``1">Recordset</see>, and
					<see cref="M:EsentSerialization.iSerializerSession.BookmarkedRecordset``1">BookmarkedRecordset</see> methods.
				</para>
				
				<para>
					Cursors/recordsets are cheap: by default they share the DB cursor that was already opened and stored in the session.<br />
					If you do need an exclusive copy of the table cursor that is not shared by all cursors/recordsets within the same session, you can create it
					by calling <see cref="M:EsentSerialization.Recordset`1.CreateOwnCursor">Recordset.CreateOwnCursor</see> method for recordsets,
					or <see cref="M:EsentSerialization.Cursor`1.CreateOwnCopy">Cursor.CreateOwnCopy</see> for cursors.
					In this case, you must properly dispose the recordset/cursor.
					Unless you've used the Cursor.CreateOwnCopy or Recordset.CreateOwnCursor API,
					it's not necessary to dispose the cursors / recordsets.
				</para>
				<para>
					<b>NB!</b> Due to the limitation of Managed ESENT API, cursor duplication is only supported in the desktop version of the library.
				</para>

				<para>
					And, you can use <see cref="T:EsentSerialization.iSerializerSession">iSerializerSession</see> interface
					to begin database transactions: see the
					<see cref="M:EsentSerialization.iSerializerSession.BeginTransaction">iSerializerSession.BeginTransaction</see> method,
					that returns a new instance of <see cref="T:EsentSerialization.iSerializerTransaction">iSerializerTransaction</see> interface.
				</para>

				<para>
					It is highly recommended that the application always be in the context of a transaction when calling any ESE APIs.
					If this is not done, the database engine will automatically wrap each ESE API call in a transaction on behalf of the application.
					The cost of these very short transactions can add up quickly in some cases.
				</para>

			</summary>
		</member>

		<!-- EsentSerialization.Attributes namespace topic -->
		<member name="N:EsentSerialization.Attributes">
			<summary>
				<para>This namespace contains attribute classes to define your database schema.</para>
				<para>
					You declare the table by applying
					<see cref="T:EsentSerialization.Attributes.EseTableAttribute">[EseTable]</see>
					to your record class.
				</para>
				<para>
					You declare the columns by applying column attributes to the fields and/or properties of your record class.
					All the column attributes are located in the
					<see cref="N:EsentSerialization.Attributes">Attributes</see> namespace,
					and are derived from
					<see cref="T:EsentSerialization.Attributes.EseColumnAttrubuteBase">EseColumnAttrubuteBase</see> class.<br />
					If you need to, you can extend the library by creating your own column classes.
				</para>
				<para>
					You declare the indices by applying
					<see cref="T:EsentSerialization.Attributes.EseIndexAttribute">[EseIndex]</see> (and/or derived attributes)
					to your record class.
				</para>
			</summary>
			<remarks>
				<para>
					In the following code snippet, you can see the example of defining a "persons" table,
					with 4 columns of different types, and 2 secondary indices.<br />
				</para>
				<!-- A sample code, copy-pasted from the demo. -->
				<code lang="C#">using EsentSerialization.Attributes;

[EseTable( "persons" )]
[EsePrimaryIndex( "id", "+id\0\0" )]
[EseIndex( "sex", "+sex\0\0" )]
[EseTupleIndex( "name" )]
public class Person
{
	// Sometimes it's nice to have an integer person ID, instead of just bookmarks.
	// Bookmarks are byte arrays, takes a memory allocations to deal with.
	// Fortunately, ESENT provides auto-incremented columns, which do great being a primary index, BTW.
	[EseAutoId( "id" )]
	private int m_id;

	public int id { get { return m_id; } }

	// Enum column
	public enum eSex { Male, Female, Other };
	[EseEnum]
	public eSex sex { get; set; }

	// Short unicode text column.
	[EseText( maxChars = 71 )]
	// See http://stackoverflow.com/questions/30485//30509#30509 for why "71"
	public string name { get; set; }

	// Multi-values ASCII text column, each value no longer than 32 characters.
	[EseMultiText( bUnicode = false, maxChars = 32 )]
	public List&lt;string&gt; phones { get; private set; }

	// This library requires your record class to have public parameterless constructor.
	public Person() { }
}</code>
			</remarks>
		</member>
	</members>
</doc>